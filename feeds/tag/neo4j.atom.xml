<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>a bit of bits...</title><link href="http://felipeforbeck.com/" rel="alternate"></link><link href="http://felipeforbeck.com/feeds/tag/neo4j.atom.xml" rel="self"></link><id>http://felipeforbeck.com/</id><updated>2016-05-28T17:20:00-07:00</updated><entry><title>Vacuum - REST API backed with Neo4j to understand the dependency graph of your microservice architecture</title><link href="http://felipeforbeck.com/posts/2016/05/java-rest-api-microservice-dependency-graph/" rel="alternate"></link><updated>2016-05-28T17:20:00-07:00</updated><author><name>Felipe Forbeck</name></author><id>tag:felipeforbeck.com,2016-05-28:posts/2016/05/java-rest-api-microservice-dependency-graph/</id><summary type="html">&lt;h3&gt;Motivation&lt;/h3&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;code&gt;A Hackathon without Borders&lt;/code&gt; or &lt;code&gt;VanHackathon&lt;/code&gt; was created for programmers, designers and digital marketers who want to show their skills to Canadian technology companies.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://vanhackathon.devpost.com/"&gt;Vanhack&lt;/a&gt; is the company behind the event. It is a startup that helps skilled IT people from all around the world to get awesome jobs in Canada. This was the first hackathon that they promoted and they already said that we will have more.&lt;/p&gt;
&lt;p&gt;For this edition we had companies such as &lt;a href="https://www.axiomzen.co/"&gt;AxiomZen&lt;/a&gt;, &lt;a href="http://hootsuite.com/"&gt;Hootsuite&lt;/a&gt;, &lt;a href="http://shopify.com"&gt;Shopify&lt;/a&gt; and many other. You can take a look &lt;a href="https://www.vanhack.com/hackathon/"&gt;here&lt;/a&gt;. Each company proposed one or more challenges for back-end, front-end, UX Designers, etc. &lt;/p&gt;
&lt;p&gt;I really liked the challenge proposed by Hootsuite which you can see the basic description bellow:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Build a system using graph DB to represent the microservice dependency graph.&lt;/li&gt;
&lt;li&gt;Imagine thousands of microservices calling each other on different API endpoints using REST:&lt;ul&gt;
&lt;li&gt;How would you know which service depends on another? &lt;/li&gt;
&lt;li&gt;How often API calls are being made from one service to another? &lt;/li&gt;
&lt;li&gt;Does one service always call all endpoints of another service, or usually just one or two?&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It was an open ended challenge, only requirement is the one mentioned above.&lt;/p&gt;
&lt;p&gt;I decided to move forward with this challenged because I would like to use a graph database, mainly &lt;a href="http://neo4j.com/"&gt;Neo4J&lt;/a&gt; and learn a bit more. I already did some small apps and proof of concepts with it in the past, but then I never touch it again.&lt;/p&gt;
&lt;h3&gt;Problem&lt;/h3&gt;
&lt;hr /&gt;
&lt;p&gt;The first thing was to decide in which language I would develop the API. I was wondering if I should use Java or Python.&lt;/p&gt;
&lt;p&gt;For Python I could use &lt;a href="http://www.tornadoweb.org/en/stable/"&gt;Tornado&lt;/a&gt;, which is web framework and asynchronous networking library. Pretty easy to install and use.
Python usually I write less code than Java to get the things done and I already created a REST API with Python and Tornado, but never using a graph db. &lt;/p&gt;
&lt;p&gt;For Java I could use &lt;a href="https://playframework.com/"&gt;Play Framework&lt;/a&gt; which is also a web framework built on top of &lt;a href="http://akka.io/"&gt;Akka&lt;/a&gt;. I already created an App using Play Framework and it was very productive and easy to use. You can check it &lt;a href="posts/2015/01/tweet-sentiment-analyst/"&gt;here&lt;/a&gt;. 
Also I could use &lt;a href="http://projects.spring.io/spring-boot/"&gt;Spring Boot&lt;/a&gt; which I've used in the past in some consulting projects and you can enable maven libraries in your project to make it a web project, standalone app and so on.&lt;/p&gt;
&lt;p&gt;Then I started thinking about how Neo4J would communicate with this two languages and, fortunately, it has official drivers for both languages: &lt;a href="http://neo4j.com/developer/java/"&gt;Java&lt;/a&gt; &amp;amp; &lt;a href="http://neo4j.com/developer/python/"&gt;Python&lt;/a&gt;.
After some research I thought it would be good move to go with Java because it has more options, besides the native drivers, to integrate with Neo4J. For instance: Spring-Data-Neo4j, Neo4j's Embedded Java API, JPA and JDBC.&lt;/p&gt;
&lt;p&gt;I thought that I could easily use Spring-Data-Neo4j with Spring-Boot and start the App with a few lines of code, because spring-data provides that &lt;a href="http://docs.spring.io/spring-data/data-commons/docs/1.6.1.RELEASE/reference/html/repositories.html"&gt;magic crud interface for repositories that allows you to easily access your persistence layer&lt;/a&gt;.
So, I just decided to move forward with Java and Spring-Data-Neo4J. Assuming that I could try another approaches to integrate with Neo4j is something else wasn't working as expected.&lt;/p&gt;
&lt;h3&gt;Solution&lt;/h3&gt;
&lt;hr /&gt;
&lt;p&gt;Vacuum is the REST API which allows you to understand the dependency graph of your microservices architecture.&lt;/p&gt;
&lt;p&gt;It is based on &lt;a href="http://swagger.io/"&gt;Swagger.io&lt;/a&gt;, you can just submit the URL of your swagger documentation
and Vacuum will parse it and create the Service-Endpoint graph as you can see in the image bellow.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Service-Endpoint-Graph" src="/images/graph-microservice-dependencies.png" /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Service&lt;/code&gt;: is the type of a &lt;em&gt;green&lt;/em&gt; node which represents the service host name. It is captured from Swagger API document. For Neo4J it is called &lt;code&gt;Label&lt;/code&gt;. One node can have multiple lables. You can imagine it as a type as well. Is important to define the label/type for your node because it helps you to perform more interesting queries later. This type of node has the property called &lt;code&gt;name&lt;/code&gt;, which is the name of the host.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Endpoint&lt;/code&gt;: is the &lt;em&gt;blue&lt;/em&gt; node which represents the service endpoints. It is also captured from Swagger API document. It is also a label. This type of node has the propety &lt;code&gt;path&lt;/code&gt; which is the path that the endpoint is exposing, for instance &lt;code&gt;/v1/users/{id}&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;EXPOSES&lt;/code&gt;: it is a type/label which defines the relationship between two nodes &lt;code&gt;Service&lt;/code&gt; and &lt;code&gt;Endpoint&lt;/code&gt;. It is an outgoing from &lt;code&gt;Service&lt;/code&gt; to &lt;code&gt;Endpoint&lt;/code&gt; and it is also built based on swagger spec. With this we can see which endpoints each service is providing. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;CALL&lt;/code&gt;: it is a relationship created when you send a request to Vacuum API that reflects the call from service A to B.
This relationship contains a property called &lt;code&gt;count&lt;/code&gt;, everytime a call from A to B is registered, &lt;code&gt;count&lt;/code&gt; is incremented.
With that you can keep track of the number of calls from A to B.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;POST&lt;/code&gt;, &lt;code&gt;GET&lt;/code&gt;, &lt;code&gt;DELETE&lt;/code&gt; and other HTTP methods: are directed relationships created between two services A and B or B to A. It depends on
which service is calling. We might have multiple relationships here because we can call the same service in different endpoints with different http methods.
So, if service A calls a endpoint &lt;code&gt;/v1/test&lt;/code&gt; using method &lt;code&gt;GET&lt;/code&gt; Vacuum will increment the &lt;code&gt;CALL&lt;/code&gt; relationship and create a new one from A to B called &lt;code&gt;GET&lt;/code&gt;,
if it already exists we also increment the &lt;code&gt;count&lt;/code&gt;. Vacuum also stores in the relationship the &lt;code&gt;path&lt;/code&gt; that is being called. In this case &lt;code&gt;path&lt;/code&gt; property would be populated
with &lt;code&gt;/v1/test&lt;/code&gt;. &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Examples (Node--Relationship--&amp;gt;Node):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Event 1 &lt;strong&gt;A&lt;/strong&gt; calls &lt;code&gt;GET&lt;/code&gt; &lt;em&gt;/v1/test&lt;/em&gt; on &lt;strong&gt;B&lt;/strong&gt;:&lt;ul&gt;
&lt;li&gt;(Service A)---(GET {path: /v1/test, count:1})---&amp;gt;(Service B)&lt;/li&gt;
&lt;li&gt;(Service A)---(CALL {count:1})---&amp;gt;(Service B)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Event 2 &lt;strong&gt;A&lt;/strong&gt; calls &lt;code&gt;DELETE&lt;/code&gt; &lt;em&gt;/v1/test&lt;/em&gt; on &lt;strong&gt;B&lt;/strong&gt;:&lt;ul&gt;
&lt;li&gt;(Service A)---(DELETE {path: /v1/test, count:1})---&amp;gt;(Service B)&lt;/li&gt;
&lt;li&gt;(Service A)---(CALL {count:2})---&amp;gt;(Service B)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Registering your service&lt;/h4&gt;
&lt;p&gt;The first step is to register your microservice in the Vacuum API, for that you need to send a post request to &lt;code&gt;/v1/microservices&lt;/code&gt; passing the swagger url of your API.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Creating a Service-Endpoint graph based on a Swagger URL&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;POST &amp;lt;host&amp;gt;:8090/v1/microservices -H &amp;#39;Content-Type: application/json&amp;#39; -d &amp;#39;{&amp;quot;swagger_url&amp;quot;: &amp;quot;&amp;lt;the_swagger_url&amp;gt;&amp;quot;}&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Registering a call from service A to service B&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Once you have registered your service you can add simple POST calls for each of your microservices to be sent to Vacuum API. The request needs to be populated with the details about the call that your service A is sending to your service B.&lt;/p&gt;
&lt;p&gt;Parameters to be filled for the request that simulates the event call from service A to B:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;origin_host:  The host name from service A&lt;/li&gt;
&lt;li&gt;method:       The HTTP method that is being called on service B&lt;/li&gt;
&lt;li&gt;target_host:  The host name from service B&lt;/li&gt;
&lt;li&gt;target_path:  The endpoint that service A is calling on B&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;POST &amp;lt;host&amp;gt;:8090/v1/requests -H &amp;#39;Content-Type: application/json&amp;#39; -d &amp;#39;{&amp;quot;origin_host&amp;quot;: &amp;quot;api.uber.com&amp;quot;, &amp;quot;method&amp;quot;: &amp;quot;POST&amp;quot;, &amp;quot;target_host&amp;quot;: &amp;quot;petstore.swagger.io&amp;quot;, &amp;quot;target_path&amp;quot;: &amp;quot;/v2/user/login&amp;quot;}&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;After that, Vacuum will create the relationships between both services considering the information you have provided in the request.
Both services need to be registered in the Vacuum API.&lt;/p&gt;
&lt;h4&gt;Basic Queries&lt;/h4&gt;
&lt;p&gt;These are the basic queries that I have implemented that you can use to get more information about the calls that your services are executing. &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Get all microservice which contains term &lt;code&gt;user&lt;/code&gt; in ther endpoints&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;GET &amp;lt;host&amp;gt;:8090/v1/microservices?path_term=user -H &amp;#39;Content-Type: application/json&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Get all services which rely on service id&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;GET &amp;lt;host&amp;gt;:8090/v1/microservices/b36e8649-e82e-4795-8ef6-c2d8eb3e6620/dependants -H &amp;#39;Content-Type: application/json&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The service id is generate and returned when you send a &lt;code&gt;POST /v1/microservices&lt;/code&gt; with &lt;code&gt;swagger_url&lt;/code&gt; as body param. Or you can just checkout the &lt;code&gt;uuid&lt;/code&gt; param on Neo4j dashboard if you have executed the &lt;code&gt;fetch_db.sh&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;Final Thoughts&lt;/h3&gt;
&lt;hr /&gt;
&lt;p&gt;It is important to mention that all queries can be easily add using the &lt;a href="http://neo4j.com/docs/developer-manual/current/#cypher-query-lang"&gt;Cypher query language&lt;/a&gt;.
&lt;em&gt;"Cypher is a declarative graph query language that allows for expressive and efficient querying and updating of the graph store."&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;In addition, I saw spring-data-neo4j allows you to create multiple labels for the same node if you create a parent class. So, all parent classes are added as labels for a node. It is important, because adding more labels to a node means that you can represent more information and ask different questions. &lt;/p&gt;
&lt;p&gt;I did not planned to use multiple labels for the same node, but if I had to, I did not want to build a inheritance structure just to represent that. I know it is the logical and OO alternative, but it is also more code to test and maintain. So I decided to try the &lt;a href="http://neo4j.com/developer/java/#neo4j-java-driver"&gt;Java Driver for Neo4J&lt;/a&gt; instead.&lt;/p&gt;
&lt;p&gt;Another point about using the Java Native Driver is that you can write your own traversal algorithms for the graph. This might be a good idea when you have a more complex graph and you really know some shortcuts in the model to get faster results than using cypher queries. At the moment, &lt;code&gt;Service&lt;/code&gt;-&lt;code&gt;Endpoint&lt;/code&gt; graph is pretty simple, though. Cypher query can solve all my problems, but if I need something more elaborated I can easily implement a new Repository with custom traversal routines.&lt;/p&gt;
&lt;p&gt;Given that, I had to create a connector which starts the connection with my local Neo4J instance and tests if it is possible to open a new session.
Also, it is important to close the connection when your app is terminated, so I added the call on &lt;code&gt;preDestroy&lt;/code&gt; method.&lt;/p&gt;
&lt;p&gt;The connector can be a singleton and can be shared between your services because you need to start a new session whenever you need to send a command to Neo4J. You also need to close the session after the work is done. The session creation is thread safe and you can see the sample connector bellow:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;org.apache.log4j.Logger&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;org.neo4j.driver.v1.Driver&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;org.neo4j.driver.v1.GraphDatabase&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;org.neo4j.driver.v1.Session&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;org.springframework.stereotype.Component&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;javax.annotation.PostConstruct&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;javax.annotation.PreDestroy&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nd"&gt;@Component&lt;/span&gt;
&lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Neo4JConnector&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="n"&gt;private&lt;/span&gt; &lt;span class="n"&gt;static&lt;/span&gt; &lt;span class="n"&gt;final&lt;/span&gt; &lt;span class="n"&gt;Logger&lt;/span&gt; &lt;span class="n"&gt;LOG&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getLogger&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Neo4JConnector&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;class&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="n"&gt;private&lt;/span&gt; &lt;span class="n"&gt;Driver&lt;/span&gt; &lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="nd"&gt;@PostConstruct&lt;/span&gt;
    &lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="n"&gt;void&lt;/span&gt; &lt;span class="n"&gt;init&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;driver&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;GraphDatabase&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;bolt://localhost&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;ping&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="n"&gt;LOG&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Graph DB started&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;private&lt;/span&gt; &lt;span class="n"&gt;void&lt;/span&gt; &lt;span class="n"&gt;ping&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;Session&lt;/span&gt; &lt;span class="n"&gt;session&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;isOpen&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nd"&gt;@PreDestroy&lt;/span&gt;
    &lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="n"&gt;void&lt;/span&gt; &lt;span class="n"&gt;terminate&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="n"&gt;LOG&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Graph DB terminated&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="n"&gt;Driver&lt;/span&gt; &lt;span class="n"&gt;getDriver&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Well, I have built the pretty basic structure for the Vacuum API. We are able to register and extract some information about the dependency graph of our services architecture, see the graph on Neo4J dashboard and easily add new queries. &lt;/p&gt;
&lt;p&gt;However, I know there is a ton of work to be done yet and many things can be improved. I am happy with the solution so far and I wish I had more time to implement other queries before the hackathon deadline. The main I idea is in place. I am planning to continue with it as a side project.&lt;/p&gt;
&lt;h3&gt;Future work&lt;/h3&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;Add more queries&lt;/li&gt;
&lt;li&gt;Document Vacuum API with Swagger.io&lt;/li&gt;
&lt;li&gt;Add authentication for Vacuum API,&lt;/li&gt;
&lt;li&gt;Enable Neo4J authentication and implement it on Vacuum API&lt;/li&gt;
&lt;li&gt;Create the Unit &amp;amp; IT Tests (Neo4J provides a test db for your IT tests)&lt;/li&gt;
&lt;li&gt;Improve DDD&lt;/li&gt;
&lt;li&gt;Add Java DOCs&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href="https://github.com/fforbeck/vacuum"&gt;&lt;img style="position: absolute; top: 0; right: 0; border: 0;" src="https://camo.githubusercontent.com/38ef81f8aca64bb9a64448d0d70f1308ef5341ab/68747470733a2f2f73332e616d617a6f6e6177732e636f6d2f6769746875622f726962626f6e732f666f726b6d655f72696768745f6461726b626c75655f3132313632312e706e67" alt="Fork me on GitHub" data-canonical-src="https://s3.amazonaws.com/github/ribbons/forkme_right_darkblue_121621.png"&gt;&lt;/a&gt;&lt;/p&gt;</summary><category term="open-source"></category><category term="rest"></category><category term="hackathon"></category><category term="neo4j"></category><category term="java"></category><category term="api"></category><category term="spring-boot"></category><category term="swagger"></category></entry></feed>