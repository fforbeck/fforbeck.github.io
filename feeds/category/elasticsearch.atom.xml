<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>a bit of bits...</title><link href="http://felipeforbeck.com/" rel="alternate"></link><link href="http://felipeforbeck.com/feeds/category/elasticsearch.atom.xml" rel="self"></link><id>http://felipeforbeck.com/</id><updated>2016-05-11T20:36:00-07:00</updated><entry><title>Elasticsearch - Server and Client config notes</title><link href="http://felipeforbeck.com/posts/2016/05/elasticsearch-notes-about-server-client-configs/" rel="alternate"></link><updated>2016-05-11T20:36:00-07:00</updated><author><name>Felipe Forbeck</name></author><id>tag:felipeforbeck.com,2016-05-11:posts/2016/05/elasticsearch-notes-about-server-client-configs/</id><summary type="html">&lt;h3&gt;ES Server - Elasticsearch v2.0.0&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;cluster.routing.allocation.cluster_concurrent_rebalance&lt;/code&gt;: 2&lt;ul&gt;
&lt;li&gt;Determines the number of shards allowed for concurrent rebalance. This property needs to be set appropriately depending on the hardware being used, for example the number of CPUs, IO capacity, etc. If this property is not set appropriately, it can impact the ElasticSearch performance with indexing. By default the value is set at 2, meaning that at any point in time only 2 shards are allowed to be moving. It is good to set this property low so that the rebalance of shards is throttled and doesn't affect indexing.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;index.store.throttle.max_bytes_per_sec&lt;/code&gt;: 10mb&lt;ul&gt;
&lt;li&gt;Allows to control the maximum bytes per sec written to the file system. I was using small documents, something around 10Kb, we can increase this value once we get bigger documents.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;index.number_of_replicas&lt;/code&gt;: 0&lt;ul&gt;
&lt;li&gt;To disable the replica allocation in order to run a single node per cluster. &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;index.routing.allocation.total_shards_per_node&lt;/code&gt;: 2&lt;ul&gt;
&lt;li&gt;The maximum number of shards (replicas and primaries) that will be allocated to a single node. Defaults is unbounded. It imposes a hard limit which can result in some shards not being allocated. Use with caution. It can be changed later to add more shards and help the search feature, because replica shards will receive the queries while primary shards will receive the index and delete requests.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;index.refresh_interval&lt;/code&gt;: 5s&lt;ul&gt;
&lt;li&gt;Better indexing performance if you leave refresh enabled. This is because ES a separate refresh thread which will do the flushing, instead of having your bulk indexing threads to it when RAM is full.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;indices.cluster.send_refresh_mapping&lt;/code&gt;: false&lt;ul&gt;
&lt;li&gt;When the index manager send a node an index request to process, the node updates its own mapping and then sends that mapping to the master. While the master processes it, that node receives a state that includes an older version of the mapping. If there’s a conflict, it’s not bad (i.e. the cluster state will eventually have the correct mapping), but we send a refresh just in case from that node to the master. In order to make the index request more efficient, we have set this property on our data nodes. We are currently running one single node so we do not need to have it enabled.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;node.max_local_storage_nodes&lt;/code&gt;: 1&lt;ul&gt;
&lt;li&gt;Start at most one single node in the cluster.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;action.destructive_requires_name&lt;/code&gt;: true&lt;ul&gt;
&lt;li&gt;The delete index API can also be applied to more than one index, or on all indices by using _all or * as index. To prevent deleting all indices via wildcards or _all.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;ES Java Client - Elasticsearch v2.0.0&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;TransportClient&lt;/code&gt; instead of &lt;code&gt;NodeClient&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;Connects to the cluster and does not act like a new node, which reduce the noise in the cluster and allow faster requests.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Parallel bulk requests and do not wait for ES Responses&lt;ul&gt;
&lt;li&gt;ES execute the bulk requests in background and it takes time to send back a response, so just send more bulk requests and put the listeners to parse the responses in another thread.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;BulkProcessorListener&lt;/code&gt; instead of &lt;code&gt;client.prepareBulk()&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;The listener allow you to configure the size of the bulk request and other flush parameters as well.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;BulkProcessorListener&lt;/code&gt; actions: 1000-10000 (current is 5K)&lt;ul&gt;
&lt;li&gt;Do not set more than 10K per bulk actions, it is not recommended.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;BulkProcessorListener&lt;/code&gt; with BulkSize in MB&lt;ul&gt;
&lt;li&gt;Set auto flush to the buffer when it reaches &lt;code&gt;X&lt;/code&gt; MB, even if it contains less than &lt;code&gt;N&lt;/code&gt; actions.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;BulkProcessorListener&lt;/code&gt; with concurrentRequests enabled (x &amp;gt;= 1)&lt;ul&gt;
&lt;li&gt;To avoid blocking threads for bulk requests is recommended to set this property using &lt;code&gt;x = 4 * num_available_cores&lt;/code&gt; for the concurrency.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary><category term="elasticsearch"></category><category term="configs"></category><category term="java"></category></entry></feed>